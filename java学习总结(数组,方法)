---
title: java学习总结(数组,方法)
data: 星期五, 10. 三月 2017 03:46下午 
categories: java相关
tags: [java,学习]
---

## java学习总结(数组,方法)

### 一.数组
####  1.1.数组的声明

```java
数据类型[ ] 数组名;   //或者: 数据类型 数组名[ ];
```

#### 1.2.为数组分配空间

声明了数组之后需要给数组分配空间,也就是定义多大的数组.

```
数组名 = new 数据类型 [数组长度];
```
数组长度就是数组最多存放元素的个数.也可以在声明数组的时候进行初始化数组,或者在声明的时候为它分配好空间,这样就可以不用再为数组分配空间.

```java
int wangxu []  = {1,2,3,4,5,6};
int wangxu [] = new char[10];
```

#### 1.3.一维数组

* 数组下表从0开始,所以数组的下标范围是0~数组长度-1.
* 数组不能越界访问,否则会报错.

#####java中的foreach:
我们经常在遍历数组的时候会用到foreach循环,for语句在数组内可以使用特殊简化版本,在遍历数组或者集合时,foreach更加简单便捷.从英文字面意思理解foreach也就是"for"每一个的意思.

```
for(元素类型 元素变量:遍历对象) {
	执行的代码
}
```

```
public class Test {
	public static void main (String[] args){
		int happiness [] = {1,2,3,4,5,6,7,8,9,10};
		for(int happy:happiness) {
			System.out.println(happy);
		}
	}
}
```

### 1.4.二维数组

二维数组也需要声明和分配空间

```java
数据类型 数组名 [][] = new 数据类型[行数][列数];

//或者
数据类型 数组名 [][] ;
数组名 = new 数据类型[][];

//再或者
数据类型 数组名[][] = {{1,2,3,4,5,6, ... }, {7,8,9,0, ... }, ...};

//二维数组的访问与一维数组类似,可以通过下标来逐个赋值和访问,注意索引从0开始
```

二维数组经常用两层循环来遍历:

```java
    String [][] name = {{"ZhaoYi", "QianEr", "SunSan"},
                {"LiSi", "ZhouWu", "WuLiu"}};
        for(int i = 0; i < 2; i++){
            for (int j = 0; j < 3; j++){
                System.out.println(name[i][j] );
            }
        }
```

### 二.方法
#### 2.1 方法重载

方法名相同但是参数列表不同(参数的个数和参数的类型不同)来实现方法的重载.

```java
public class Test {
    void f(int i) {
        System.out.println("i=" + i);
    }

    void f(float f) {
        System.out.println("f=" + f);
    }

    void f(String s) {
        System.out.println("s=" + s);
    }

    void f(String s1, String s2){
        System.out.println("s1+s2="+(s1+s2));
    }

    void f(String s, int i){
        System.out.println("s="+s+",i="+i);
    }

    public static void main(String[] args) {
        Test test = new Test();
        test.f(3456);
        test.f(34.56f);
        test.f("abc");
        test.f("abc","def");
        test.f("abc",3456);
    }
}
```

方法重载要注意以下规则:

* 在使用方法重载的时候,必须通过方法中不同的参数列表来实现方法的重载. 如:方法的参数个数不同或者方法的参数类型不同.
* 不能通过访问权限,返回值类型和抛出的异常来实现重载.
* 重载的方法中允许抛出不同的异常.
* 可以有不同的返回值类型,只要方法的参数列表不同即可.
* 可以有不同的访问修饰符.

其实说了这么多的废话总之就是一句: 参数个数或者参数类型不同即可!!!

#### 2.2 返回值

如上面的例子所示，方法是一个实现了条件输入和结果输出的过程，往往我们需要对方法的结果进行进一步的处理，这时候我们就需要方法返回值了。

注意：

1. 如果方法的返回类型为 void ，则方法中不能使用 return 返回值。

2. 方法的返回值最多只能有一个，不能返回多个值。

3. 方法返回值的类型必须兼容，也就是说如果返回值类型为 int ，则不能返回 String 型值

4. 调用带返回值的方法时，由于方法执行后会返回一个结果，因此在调用带返回值方法时一般都会接收其返回值并进行处理
